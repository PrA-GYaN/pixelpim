generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  fullname        String?
  password        String?
  googleId        String?          @unique
  provider        String           @default("local")
  createdAt       DateTime         @default(now())
  attributes      Attribute[]      @relation("UserAttributes")
  attributeGroups AttributeGroup[] @relation("UserAttributeGroups")
  families        Family[]         @relation("UserFamilies")
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  type      String
  verified  Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, type])
}

model Attribute {
  id               Int                       @id @default(autoincrement())
  name             String                    @unique
  type             String
  defaultValue     String?
  userId           Int
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  user             User                      @relation("UserAttributes", fields: [userId], references: [id], onDelete: Cascade)
  attributeGroups  AttributeGroupAttribute[]
  familyAttributes FamilyAttribute[]
}

model AttributeGroup {
  id          Int                       @id @default(autoincrement())
  name        String                    @unique
  description String?
  userId      Int
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  user        User                      @relation("UserAttributeGroups", fields: [userId], references: [id], onDelete: Cascade)
  attributes  AttributeGroupAttribute[]
}

model AttributeGroupAttribute {
  id               Int            @id @default(autoincrement())
  attributeId      Int
  attributeGroupId Int
  required         Boolean        @default(false)
  defaultValue     String?
  createdAt        DateTime       @default(now())
  attributeGroup   AttributeGroup @relation(fields: [attributeGroupId], references: [id], onDelete: Cascade)
  attribute        Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([attributeId, attributeGroupId])
}

model Family {
  id               Int               @id @default(autoincrement())
  name             String
  userId           Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation("UserFamilies", fields: [userId], references: [id], onDelete: Cascade)
  familyAttributes FamilyAttribute[]

  @@unique([name, userId])
}

model FamilyAttribute {
  id              Int       @id @default(autoincrement())
  familyId        Int
  attributeId     Int
  isRequired      Boolean   @default(false)
  additionalValue String?
  createdAt       DateTime  @default(now())
  attribute       Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  family          Family    @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([familyId, attributeId])
}
